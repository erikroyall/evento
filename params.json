{"name":"Evento","tagline":"Cross-browser event handling system","body":"evento\r\n======\r\n\r\nLight-weight cross-browser event handling system. \r\n\r\n## Documentation\r\n\r\nevento provides three functions - `add`, `remove`, `trigger` - which can be used to register, remove, or fire  event handlers to/attached to the `EventTarget`. The `EventTarget` must be an instance of `Element`, `Window` or `Document`.\r\n\r\nIf you don't know what they do, [go learn some JavaScript](http://www.smashingmagazine.com/2012/08/17/javascript-events-responding-user/).\r\n\r\n`.add()` - Register the `handler` to the `EventTarget` whenever the `event` is fired.\r\n\r\n```js\r\nevento.add(EventTarget, event, handler);\r\n```\r\n\r\n`.remove()` - Remove the `handler` registered to the `EventTarget` and prevent it from being called on `event`.\r\n\r\n```js\r\nevento.remove(EventTarget, event, handler);\r\n```\r\n\r\n`.trigger()` - Trigger an `event` on the `EventTarget`. Note: This will call all handlers that have been registered to be called on `event` for that `EventTarget`.\r\n\r\n```js\r\nevento.trigger(EventTarget, event);\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}